Pure functions:
	-have no hidden inputs
	-have no hidden outputs
	-do not execute other side effects

	-are called referentially transparent: 
	 they return the same result everytime they're called
	 with the same visible parameter
	-they can be treated as data

We have to mutate things as less as possible.
Functional programming - functions are trated as data

CODE NOTES (Visual Studio 2019): 
	-when using functionalPlus library you have to remove 
	 a couple of lines from result.hpp file.
	-to add an include folder to the project: 
		Project -> properties -> C/C++ -> general -> Additional include directories
		set it to: "$(SolutionDir)Dependencias/include"

DRY principle = Don't Repeat Yourself
------------------------------------------------------------------------

Class 1.3 : types of data in functional programming

int x
x : Int;

vector<int> xs;
xs: [Int];

pair<int, float> p;
p : (Int, Float);

map<Key, Value> dict;
dict : Map Key Value;

int foo(string)
foo : String -> Int

ContainerIn transform(F function, const ContainerOut& xs);
transform : ((a->b), [a]) -> [b]

// this is a variation of the use of templates just
// for restrict the use of std functions:
std::function<void(int)> f; // f is an object of type "function"
							// to which it can be assigned any function
							// which receives an int and returns void.

Container keep_if(F function, const Container & xs);
keep_if : ((a -> Bool), [a]) -> [a]

functional plus api search:
http://www.editgym.com/fplus-api-search/
Here we can search for functions using queries in functional programming
notation or in classic c++ notation

------------------------------------------------------------------------

class 10:

arity: number of parameters a function takes
partial application: process of decreasing the arity
currying: transformation of a several arguments function in a 
		  single argument function


------------------------------------------------------------------------

class 13:

compose function is used to compose some functions in only one.
This is used to make clearer the readabality and to increase the 
performance of the compiler, for example, when it is necessary to 
do a couple of consequent transform loops

------------------------------------------------------------------------

-memoization: consists on saving the result of a calling to a complex function
			  using a certain parameter just to optimize cumputing time.
			  If I call a pure function with the same parameter a lot of times,
			  I will waste a lot of necessary time doing the same task. In this 
			  cases is recommended to use memoization, in order to save the 
			  result and not waste time calculating it over and over again.

------------------------------------------------------------------------

class 17: monoids

A set is closed (and it is called a closure) under an operation if performance of that operation on members of the set always produces a member of that set.
identity = neutral element (a + neutral = a   ->  1+0=1)

associativity commutativity identity name
		    1			  0		   0 semigroup
		    1			  1 	   0 commutative semigroup
		    1			  0		   1 monoid
		    1			  1		   1 commutative monoid

EXERCISE:


Exercise:
1) Can you find neutral elements to these three semigroups
and thus make them monoids?

	Semigroups:
	1) sets under the union operation
			answer -> empty set
	2) numbers under multiplication
				answer -> 1
	3) strings (or sequences in general) under concatenation
			answer -> empty string


2) Which of them are commutative and which are not?

	Semigroups:
	1) sets under the union operation
			answer -> yes
	2) numbers under multiplication
				answer -> yes
	3) strings (or sequences in general) under concatenation
			answer -> not


------------------------------------------------------------------------

class 18: error handling.

-optional: data type that represents a value that may or may not be present.
-maybe monad:
	The Maybe monad allows us to sequence actions in the context of failure. 
	That is, an action in the Maybe monad can either yield a value or result 
	in failure. This allows us to express computations that may go wrong and fail,
	such as taking the head of an empty list.
	Maybe<a> can denote a failed computation if it contains a null pointer, or 
	ir can denote a value if its pointer points to that value. It is a special
	kind of function object or computational entity that may yield a value
	depending on the state of its internal pointer. It is a monadic value or
	monadic action. It is useful to handle errors and avoid the access to 
	something that is not there
-
--------------------------------------------------------------------------

class 19: functors: type of container holding some type which follows the next laws:
	1-mapping the identity function has the same effect as apply it directly to the container
	2-composition: fmap(compose(f,g)) == compose(fmap(f), fmap(g))
	3-has a map function on it (it can be mapped)

